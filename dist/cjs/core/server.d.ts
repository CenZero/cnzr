import { Server } from "http";
import { Router } from './router';
import { PluginManager } from './plugin';
import { ErrorHandlerManager, ErrorHandler, ContextErrorHandler } from './error-handler';
import { SessionOptions } from "./session";
import { MiddlewareEngine } from './middleware-engine';
import { RouteHandler, ContextRouteHandler, MiddlewareFunction, ContextMiddlewareFunction, CenzeroOptions } from "./types";
export declare class CenzeroApp {
    private myHttpServer;
    private myMainRouter;
    private myMiddlewareStack;
    private myMwEngine;
    private myStaticHandler;
    private myViewEngine;
    private myAppConfig;
    private myPluginMgr;
    private myFileBasedRouter?;
    private myErrHandler;
    private mySessionConfig?;
    private debugMode;
    private myRequestCount;
    constructor(options?: CenzeroOptions);
    get(path: string, ...handlers: ((RouteHandler | ContextRouteHandler) | (MiddlewareFunction | ContextMiddlewareFunction))[]): void;
    post(path: string, ...handlers: ((RouteHandler | ContextRouteHandler) | (MiddlewareFunction | ContextMiddlewareFunction))[]): void;
    put(path: string, ...handlers: ((RouteHandler | ContextRouteHandler) | (MiddlewareFunction | ContextMiddlewareFunction))[]): void;
    delete(path: string, ...handlers: ((RouteHandler | ContextRouteHandler) | (MiddlewareFunction | ContextMiddlewareFunction))[]): void;
    use(pathOrHandler: string | MiddlewareFunction | ContextMiddlewareFunction, handler?: MiddlewareFunction | ContextMiddlewareFunction): void;
    onError(handler: ErrorHandler | ContextErrorHandler): void;
    setErrorHandler(handler: ErrorHandler | ContextErrorHandler): void;
    getFileRoutes(): any[];
    enableFileRouting(routesDir?: string): Promise<void>;
    plugin(plugin: any, options?: any): Promise<void>;
    usePlugin(pluginFn: any, config?: any): Promise<void>;
    static(path: string, directory: string): void;
    render(template: string, data?: any): Promise<string>;
    useSession(options?: SessionOptions): void;
    getSessionOptions(): SessionOptions | undefined;
    getServer(): Server;
    getRouter(): Router;
    getPluginManager(): PluginManager;
    getMiddleware(): (MiddlewareFunction | ContextMiddlewareFunction)[];
    getErrorHandler(): ErrorHandlerManager;
    getMiddlewareEngine(): MiddlewareEngine;
    getServerStats(): {
        requestCount: number;
        uptime: number;
        memoryUsage: NodeJS.MemoryUsage;
        routes: number;
        middleware: number;
    };
    listen(port?: number, host?: string, callback?: () => void): Server;
    private handleRequest;
    private isContextHandler;
    private isContextMiddleware;
    private executeContextMiddlewares;
    private executeLegacyMiddlewares;
    private handle404;
    private handle500;
    close(callback?: () => void): Promise<void>;
}
//# sourceMappingURL=server.d.ts.map