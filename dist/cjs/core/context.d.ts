import { CenzeroRequest, CenzeroResponse } from './types';
import { Session, SessionOptions } from './session';
import { Cookies } from './cookies';
export interface CenzeroContext {
    req: CenzeroRequest;
    res: CenzeroResponse;
    params: Record<string, string>;
    query: Record<string, any>;
    body: any;
    headers: Record<string, string | string[]>;
    method: string;
    path: string;
    url: string;
    session: Session;
    cookies: Cookies;
    requestId: string;
    state: Record<string, any>;
    json(data: any): void;
    html(content: string): void;
    text(content: string): void;
    redirect(url: string, statusCode?: number): void;
    status(code: number): CenzeroContext;
    send(data: any): void;
    set(field: string, value: string): void;
    get(field: string): string | undefined;
    throw(status: number, message?: string): never;
    assert(condition: any, status: number, message?: string): asserts condition;
    createError(status: number, message?: string): Error;
}
export declare class Context implements CenzeroContext {
    req: CenzeroRequest;
    res: CenzeroResponse;
    params: Record<string, string>;
    query: Record<string, any>;
    body: any;
    headers: Record<string, string | string[]>;
    method: string;
    path: string;
    url: string;
    session: Session;
    cookies: Cookies;
    requestId: string;
    state: Record<string, any>;
    constructor(req: CenzeroRequest, res: CenzeroResponse, sessionOptions?: SessionOptions);
    json(data: any): void;
    html(content: string): void;
    text(content: string): void;
    redirect(url: string, statusCode?: number): void;
    status(code: number): CenzeroContext;
    send(data: any): void;
    set(field: string, value: string): void;
    get(field: string): string | undefined;
    throw(status: number, message?: string): never;
    assert(condition: any, status: number, message?: string): asserts condition;
    createError(status: number, message?: string): Error;
    get isAjax(): boolean;
    get userAgent(): string;
    get clientIP(): string;
}
//# sourceMappingURL=context.d.ts.map